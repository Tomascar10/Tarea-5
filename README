# Tarea 5 - Sistema de Colas de Mensajes en XV6

## Descripción General
Esta tarea consiste en implementar un sistema de **Colas de Mensajes** en el kernel de **XV6**, que permita la comunicación entre procesos a través de dos nuevas llamadas al sistema: `sys_send` y `sys_receive`. Este sistema utiliza una cola circular protegida por `spinlocks` para garantizar la sincronización entre procesos.

---

## Funcionamiento y Lógica
El sistema de colas de mensajes implementado funciona de la siguiente manera:

1. **Estructura de Datos**:
   - Se utiliza una estructura global de tipo `message_queue`, que incluye:
     - Un array circular de mensajes.
     - Variables para los índices de lectura (`head`) y escritura (`tail`).
     - Un contador de mensajes actuales (`count`).
     - Un `spinlock` para garantizar exclusión mutua al acceder a la cola.

2. **Llamadas al Sistema**:
   - `sys_send`: Permite a un proceso enviar un mensaje a la cola. Si la cola está llena, devuelve un error.
   - `sys_receive`: Permite a un proceso recibir un mensaje de la cola. Si la cola está vacía, el proceso se bloquea hasta que haya un mensaje disponible.

3. **Sincronización**:
   - Se utilizan funciones de sincronización como `acquire`, `release`, `sleep` y `wakeup` para manejar accesos concurrentes y el bloqueo/desbloqueo de procesos.

4. **Pruebas**:
   - Se creó una función de prueba (`test_message_queue`) para validar el funcionamiento del sistema. Esta prueba incluye un proceso escritor que envía mensajes y un proceso lector que los recibe y los imprime en la consola.

---

## Modificaciones Realizadas

### **1. Estructura de la Cola de Mensajes**
Se añadió una estructura global para la cola en el archivo `proc.c`:

```c
#define MSG_QUEUE_SIZE 32

typedef struct message_queue {
    message messages[MSG_QUEUE_SIZE];
    int head;  // Índice de lectura
    int tail;  // Índice de escritura
    int count; // Número de mensajes en la cola
    struct spinlock lock;
} message_queue;

message_queue msg_queue;  // Cola de mensajes global
